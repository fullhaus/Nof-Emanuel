pipeline {
    agent { label 'built-in' }
    environment {
        KUBECONFIG = credentials('kube-config-credential-id')
        ACR_NAME   = 'nofemanueltest.azurecr.io'
        IMAGE_NAME = 'app'
        //TAG        = 'latest'
        TAG        = "1.0.0-${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout code') {
            steps {
                echo 'Cloning the repository...'
                git branch: 'main', url: 'https://github.com/fullhaus/Nof-Emanuel.git'
            }
        }
        stage('Build docker image') {
            steps {
                echo 'Building docker image...'
                sh '''
                    cd ./app
                    docker build -t ${ACR_NAME}/${IMAGE_NAME}:${TAG} .
                    docker tag ${ACR_NAME}/${IMAGE_NAME}:${TAG} ${ACR_NAME}/${IMAGE_NAME}:latest
                    docker images
                '''
            }
        }
        stage('Login to Azure ACR') {
            steps {
                echo 'Logging into Azure Container Registry...'
                withCredentials([usernamePassword(credentialsId: 'azure-acr-credentials', usernameVariable: 'ACR_USER', passwordVariable: 'ACR_PASSWORD')]) {
                    sh '''
                        echo $ACR_PASSWORD | docker login $ACR_NAME -u $ACR_USER --password-stdin
                    '''
                }
            }
        }
        stage('Push Docker Image to ACR') {
            steps {
                echo 'Pushing Docker image to Azure Container Registry...'
                sh '''
                    docker push ${ACR_NAME}/${IMAGE_NAME}:${TAG}
                    docker push ${ACR_NAME}/${IMAGE_NAME}:latest
                '''
            }
        }
        stage('Deploy to AKS') {
            steps {
                echo 'Deploying application to Kubernetes...'
                //
                script {
                    // Define variables
                    def deploymentName = 'test-nof-emanuel-app-nof-emanuel'
                    def containerName = 'nof-emanuel-app'
                    def newImageVersion = "${ACR_NAME}/${IMAGE_NAME}:${TAG}"

                    // Update the container image
                    sh """
                    kubectl set image deployment/${deploymentName} ${containerName}=${newImageVersion} -n default
                    """

                    // Verify the update
                    sh """
                    kubectl rollout status deployment/${deploymentName} -n default
                    """
                }
            }
        }
        stage('Verify Application') {
            steps {
                echo 'Verifying application deployment...'

                // Check if pods are running
                sh '''
                kubectl get pods -n default
                '''

                // Check service accessibility
                sh '''
                kubectl get service test-nof-emanuel-nof-emanuel-service -n default
                '''

                // Check with curl
                // TODO
                //sh '''
                //curl -s http://<application-service-url>/health || exit 1
                //'''
            }
        }
    }
}